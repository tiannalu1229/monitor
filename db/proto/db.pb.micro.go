// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/db.proto

package db

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Db service

func NewDbEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Db service

type DbService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Db_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Db_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Db_BidiStreamService, error)
	GetPush(ctx context.Context, in *GetPushRequest, opts ...client.CallOption) (*GetPushResponse, error)
	GetPushDetail(ctx context.Context, in *GetPushDetailRequest, opts ...client.CallOption) (*GetPushDetailResponse, error)
}

type dbService struct {
	c    client.Client
	name string
}

func NewDbService(name string, c client.Client) DbService {
	return &dbService{
		c:    c,
		name: name,
	}
}

func (c *dbService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Db.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbService) ClientStream(ctx context.Context, opts ...client.CallOption) (Db_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Db.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &dbServiceClientStream{stream}, nil
}

type Db_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type dbServiceClientStream struct {
	stream client.Stream
}

func (x *dbServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *dbServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *dbServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *dbServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dbServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dbServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *dbService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Db_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Db.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &dbServiceServerStream{stream}, nil
}

type Db_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type dbServiceServerStream struct {
	stream client.Stream
}

func (x *dbServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *dbServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *dbServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *dbServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dbServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dbServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbService) BidiStream(ctx context.Context, opts ...client.CallOption) (Db_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Db.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &dbServiceBidiStream{stream}, nil
}

type Db_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type dbServiceBidiStream struct {
	stream client.Stream
}

func (x *dbServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *dbServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *dbServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *dbServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dbServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dbServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *dbServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbService) GetPush(ctx context.Context, in *GetPushRequest, opts ...client.CallOption) (*GetPushResponse, error) {
	req := c.c.NewRequest(c.name, "Db.GetPush", in)
	out := new(GetPushResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbService) GetPushDetail(ctx context.Context, in *GetPushDetailRequest, opts ...client.CallOption) (*GetPushDetailResponse, error) {
	req := c.c.NewRequest(c.name, "Db.GetPushDetail", in)
	out := new(GetPushDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Db service

type DbHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Db_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Db_ServerStreamStream) error
	BidiStream(context.Context, Db_BidiStreamStream) error
	GetPush(context.Context, *GetPushRequest, *GetPushResponse) error
	GetPushDetail(context.Context, *GetPushDetailRequest, *GetPushDetailResponse) error
}

func RegisterDbHandler(s server.Server, hdlr DbHandler, opts ...server.HandlerOption) error {
	type db interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
		GetPush(ctx context.Context, in *GetPushRequest, out *GetPushResponse) error
		GetPushDetail(ctx context.Context, in *GetPushDetailRequest, out *GetPushDetailResponse) error
	}
	type Db struct {
		db
	}
	h := &dbHandler{hdlr}
	return s.Handle(s.NewHandler(&Db{h}, opts...))
}

type dbHandler struct {
	DbHandler
}

func (h *dbHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.DbHandler.Call(ctx, in, out)
}

func (h *dbHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.DbHandler.ClientStream(ctx, &dbClientStreamStream{stream})
}

type Db_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type dbClientStreamStream struct {
	stream server.Stream
}

func (x *dbClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *dbClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *dbClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dbClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dbClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *dbHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DbHandler.ServerStream(ctx, m, &dbServerStreamStream{stream})
}

type Db_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type dbServerStreamStream struct {
	stream server.Stream
}

func (x *dbServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *dbServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *dbServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dbServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dbServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *dbHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.DbHandler.BidiStream(ctx, &dbBidiStreamStream{stream})
}

type Db_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type dbBidiStreamStream struct {
	stream server.Stream
}

func (x *dbBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *dbBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *dbBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dbBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dbBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *dbBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *dbHandler) GetPush(ctx context.Context, in *GetPushRequest, out *GetPushResponse) error {
	return h.DbHandler.GetPush(ctx, in, out)
}

func (h *dbHandler) GetPushDetail(ctx context.Context, in *GetPushDetailRequest, out *GetPushDetailResponse) error {
	return h.DbHandler.GetPushDetail(ctx, in, out)
}
