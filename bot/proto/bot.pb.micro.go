// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bot.proto

package bot

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Bot service

func NewBotEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Bot service

type BotService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Bot_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Bot_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Bot_BidiStreamService, error)
	Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error)
}

type botService struct {
	c    client.Client
	name string
}

func NewBotService(name string, c client.Client) BotService {
	return &botService{
		c:    c,
		name: name,
	}
}

func (c *botService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Bot.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botService) ClientStream(ctx context.Context, opts ...client.CallOption) (Bot_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Bot.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &botServiceClientStream{stream}, nil
}

type Bot_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type botServiceClientStream struct {
	stream client.Stream
}

func (x *botServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *botServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *botServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *botServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *botServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *botServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *botService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Bot_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Bot.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &botServiceServerStream{stream}, nil
}

type Bot_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type botServiceServerStream struct {
	stream client.Stream
}

func (x *botServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *botServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *botServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *botServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *botServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *botServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *botService) BidiStream(ctx context.Context, opts ...client.CallOption) (Bot_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Bot.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &botServiceBidiStream{stream}, nil
}

type Bot_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type botServiceBidiStream struct {
	stream client.Stream
}

func (x *botServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *botServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *botServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *botServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *botServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *botServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *botServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *botService) Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error) {
	req := c.c.NewRequest(c.name, "Bot.Send", in)
	out := new(SendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bot service

type BotHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Bot_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Bot_ServerStreamStream) error
	BidiStream(context.Context, Bot_BidiStreamStream) error
	Send(context.Context, *SendRequest, *SendResponse) error
}

func RegisterBotHandler(s server.Server, hdlr BotHandler, opts ...server.HandlerOption) error {
	type bot interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
		Send(ctx context.Context, in *SendRequest, out *SendResponse) error
	}
	type Bot struct {
		bot
	}
	h := &botHandler{hdlr}
	return s.Handle(s.NewHandler(&Bot{h}, opts...))
}

type botHandler struct {
	BotHandler
}

func (h *botHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.BotHandler.Call(ctx, in, out)
}

func (h *botHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.BotHandler.ClientStream(ctx, &botClientStreamStream{stream})
}

type Bot_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type botClientStreamStream struct {
	stream server.Stream
}

func (x *botClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *botClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *botClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *botClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *botClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *botHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.BotHandler.ServerStream(ctx, m, &botServerStreamStream{stream})
}

type Bot_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type botServerStreamStream struct {
	stream server.Stream
}

func (x *botServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *botServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *botServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *botServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *botServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *botHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.BotHandler.BidiStream(ctx, &botBidiStreamStream{stream})
}

type Bot_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type botBidiStreamStream struct {
	stream server.Stream
}

func (x *botBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *botBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *botBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *botBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *botBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *botBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *botHandler) Send(ctx context.Context, in *SendRequest, out *SendResponse) error {
	return h.BotHandler.Send(ctx, in, out)
}
