// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/security.proto

package security

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Security service

func NewSecurityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Security service

type SecurityService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Security_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Security_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Security_BidiStreamService, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...client.CallOption) (*CheckTokenResponse, error)
}

type securityService struct {
	c    client.Client
	name string
}

func NewSecurityService(name string, c client.Client) SecurityService {
	return &securityService{
		c:    c,
		name: name,
	}
}

func (c *securityService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Security.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityService) ClientStream(ctx context.Context, opts ...client.CallOption) (Security_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Security.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &securityServiceClientStream{stream}, nil
}

type Security_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type securityServiceClientStream struct {
	stream client.Stream
}

func (x *securityServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *securityServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *securityServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *securityServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *securityServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *securityServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *securityService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Security_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Security.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &securityServiceServerStream{stream}, nil
}

type Security_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type securityServiceServerStream struct {
	stream client.Stream
}

func (x *securityServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *securityServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *securityServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *securityServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *securityServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *securityServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityService) BidiStream(ctx context.Context, opts ...client.CallOption) (Security_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Security.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &securityServiceBidiStream{stream}, nil
}

type Security_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type securityServiceBidiStream struct {
	stream client.Stream
}

func (x *securityServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *securityServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *securityServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *securityServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *securityServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *securityServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *securityServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityService) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...client.CallOption) (*CheckTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Security.CheckToken", in)
	out := new(CheckTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Security service

type SecurityHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Security_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Security_ServerStreamStream) error
	BidiStream(context.Context, Security_BidiStreamStream) error
	CheckToken(context.Context, *CheckTokenRequest, *CheckTokenResponse) error
}

func RegisterSecurityHandler(s server.Server, hdlr SecurityHandler, opts ...server.HandlerOption) error {
	type security interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
		CheckToken(ctx context.Context, in *CheckTokenRequest, out *CheckTokenResponse) error
	}
	type Security struct {
		security
	}
	h := &securityHandler{hdlr}
	return s.Handle(s.NewHandler(&Security{h}, opts...))
}

type securityHandler struct {
	SecurityHandler
}

func (h *securityHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.SecurityHandler.Call(ctx, in, out)
}

func (h *securityHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.SecurityHandler.ClientStream(ctx, &securityClientStreamStream{stream})
}

type Security_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type securityClientStreamStream struct {
	stream server.Stream
}

func (x *securityClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *securityClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *securityClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *securityClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *securityClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *securityHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.SecurityHandler.ServerStream(ctx, m, &securityServerStreamStream{stream})
}

type Security_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type securityServerStreamStream struct {
	stream server.Stream
}

func (x *securityServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *securityServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *securityServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *securityServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *securityServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *securityHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.SecurityHandler.BidiStream(ctx, &securityBidiStreamStream{stream})
}

type Security_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type securityBidiStreamStream struct {
	stream server.Stream
}

func (x *securityBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *securityBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *securityBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *securityBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *securityBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *securityBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *securityHandler) CheckToken(ctx context.Context, in *CheckTokenRequest, out *CheckTokenResponse) error {
	return h.SecurityHandler.CheckToken(ctx, in, out)
}
