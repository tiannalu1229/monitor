// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/export.proto

package export

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Export service

func NewExportEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Export service

type ExportService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Export_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Export_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Export_BidiStreamService, error)
	Export(ctx context.Context, in *ExportRequest, opts ...client.CallOption) (*ExportResponse, error)
}

type exportService struct {
	c    client.Client
	name string
}

func NewExportService(name string, c client.Client) ExportService {
	return &exportService{
		c:    c,
		name: name,
	}
}

func (c *exportService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Export.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportService) ClientStream(ctx context.Context, opts ...client.CallOption) (Export_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Export.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &exportServiceClientStream{stream}, nil
}

type Export_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type exportServiceClientStream struct {
	stream client.Stream
}

func (x *exportServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *exportServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *exportServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exportServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exportServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exportServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *exportService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Export_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Export.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &exportServiceServerStream{stream}, nil
}

type Export_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type exportServiceServerStream struct {
	stream client.Stream
}

func (x *exportServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *exportServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *exportServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exportServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exportServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exportServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportService) BidiStream(ctx context.Context, opts ...client.CallOption) (Export_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Export.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &exportServiceBidiStream{stream}, nil
}

type Export_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type exportServiceBidiStream struct {
	stream client.Stream
}

func (x *exportServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *exportServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *exportServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exportServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exportServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exportServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *exportServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportService) Export(ctx context.Context, in *ExportRequest, opts ...client.CallOption) (*ExportResponse, error) {
	req := c.c.NewRequest(c.name, "Export.Export", in)
	out := new(ExportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Export service

type ExportHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Export_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Export_ServerStreamStream) error
	BidiStream(context.Context, Export_BidiStreamStream) error
	Export(context.Context, *ExportRequest, *ExportResponse) error
}

func RegisterExportHandler(s server.Server, hdlr ExportHandler, opts ...server.HandlerOption) error {
	type export interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
		Export(ctx context.Context, in *ExportRequest, out *ExportResponse) error
	}
	type Export struct {
		export
	}
	h := &exportHandler{hdlr}
	return s.Handle(s.NewHandler(&Export{h}, opts...))
}

type exportHandler struct {
	ExportHandler
}

func (h *exportHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.ExportHandler.Call(ctx, in, out)
}

func (h *exportHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.ExportHandler.ClientStream(ctx, &exportClientStreamStream{stream})
}

type Export_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type exportClientStreamStream struct {
	stream server.Stream
}

func (x *exportClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *exportClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exportClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exportClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exportClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *exportHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ExportHandler.ServerStream(ctx, m, &exportServerStreamStream{stream})
}

type Export_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type exportServerStreamStream struct {
	stream server.Stream
}

func (x *exportServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *exportServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exportServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exportServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exportServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *exportHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.ExportHandler.BidiStream(ctx, &exportBidiStreamStream{stream})
}

type Export_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type exportBidiStreamStream struct {
	stream server.Stream
}

func (x *exportBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *exportBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exportBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exportBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exportBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *exportBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *exportHandler) Export(ctx context.Context, in *ExportRequest, out *ExportResponse) error {
	return h.ExportHandler.Export(ctx, in, out)
}
