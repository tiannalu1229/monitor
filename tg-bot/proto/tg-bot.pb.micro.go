// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/tg-bot.proto

package tgbot

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TgBot service

func NewTgBotEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TgBot service

type TgBotService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (TgBot_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (TgBot_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (TgBot_BidiStreamService, error)
	ReceiveMsg(ctx context.Context, in *ReceiveMsgRequest, opts ...client.CallOption) (*ReceiveMsgResponse, error)
}

type tgBotService struct {
	c    client.Client
	name string
}

func NewTgBotService(name string, c client.Client) TgBotService {
	return &tgBotService{
		c:    c,
		name: name,
	}
}

func (c *tgBotService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "TgBot.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgBotService) ClientStream(ctx context.Context, opts ...client.CallOption) (TgBot_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "TgBot.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &tgBotServiceClientStream{stream}, nil
}

type TgBot_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type tgBotServiceClientStream struct {
	stream client.Stream
}

func (x *tgBotServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *tgBotServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *tgBotServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *tgBotServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tgBotServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tgBotServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *tgBotService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (TgBot_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "TgBot.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &tgBotServiceServerStream{stream}, nil
}

type TgBot_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type tgBotServiceServerStream struct {
	stream client.Stream
}

func (x *tgBotServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *tgBotServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *tgBotServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *tgBotServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tgBotServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tgBotServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tgBotService) BidiStream(ctx context.Context, opts ...client.CallOption) (TgBot_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "TgBot.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &tgBotServiceBidiStream{stream}, nil
}

type TgBot_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type tgBotServiceBidiStream struct {
	stream client.Stream
}

func (x *tgBotServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *tgBotServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *tgBotServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *tgBotServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tgBotServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tgBotServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *tgBotServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tgBotService) ReceiveMsg(ctx context.Context, in *ReceiveMsgRequest, opts ...client.CallOption) (*ReceiveMsgResponse, error) {
	req := c.c.NewRequest(c.name, "TgBot.ReceiveMsg", in)
	out := new(ReceiveMsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TgBot service

type TgBotHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, TgBot_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, TgBot_ServerStreamStream) error
	BidiStream(context.Context, TgBot_BidiStreamStream) error
	ReceiveMsg(context.Context, *ReceiveMsgRequest, *ReceiveMsgResponse) error
}

func RegisterTgBotHandler(s server.Server, hdlr TgBotHandler, opts ...server.HandlerOption) error {
	type tgBot interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
		ReceiveMsg(ctx context.Context, in *ReceiveMsgRequest, out *ReceiveMsgResponse) error
	}
	type TgBot struct {
		tgBot
	}
	h := &tgBotHandler{hdlr}
	return s.Handle(s.NewHandler(&TgBot{h}, opts...))
}

type tgBotHandler struct {
	TgBotHandler
}

func (h *tgBotHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.TgBotHandler.Call(ctx, in, out)
}

func (h *tgBotHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.TgBotHandler.ClientStream(ctx, &tgBotClientStreamStream{stream})
}

type TgBot_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type tgBotClientStreamStream struct {
	stream server.Stream
}

func (x *tgBotClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *tgBotClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *tgBotClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tgBotClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tgBotClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *tgBotHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TgBotHandler.ServerStream(ctx, m, &tgBotServerStreamStream{stream})
}

type TgBot_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type tgBotServerStreamStream struct {
	stream server.Stream
}

func (x *tgBotServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *tgBotServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *tgBotServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tgBotServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tgBotServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *tgBotHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.TgBotHandler.BidiStream(ctx, &tgBotBidiStreamStream{stream})
}

type TgBot_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type tgBotBidiStreamStream struct {
	stream server.Stream
}

func (x *tgBotBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *tgBotBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *tgBotBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tgBotBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tgBotBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *tgBotBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *tgBotHandler) ReceiveMsg(ctx context.Context, in *ReceiveMsgRequest, out *ReceiveMsgResponse) error {
	return h.TgBotHandler.ReceiveMsg(ctx, in, out)
}
