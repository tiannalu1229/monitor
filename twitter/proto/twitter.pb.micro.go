// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/twitter.proto

package twitter

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Twitter service

func NewTwitterEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Twitter service

type TwitterService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Twitter_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Twitter_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Twitter_BidiStreamService, error)
}

type twitterService struct {
	c    client.Client
	name string
}

func NewTwitterService(name string, c client.Client) TwitterService {
	return &twitterService{
		c:    c,
		name: name,
	}
}

func (c *twitterService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Twitter.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterService) ClientStream(ctx context.Context, opts ...client.CallOption) (Twitter_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Twitter.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &twitterServiceClientStream{stream}, nil
}

type Twitter_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type twitterServiceClientStream struct {
	stream client.Stream
}

func (x *twitterServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *twitterServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *twitterServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *twitterServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *twitterServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *twitterServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *twitterService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Twitter_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Twitter.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &twitterServiceServerStream{stream}, nil
}

type Twitter_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type twitterServiceServerStream struct {
	stream client.Stream
}

func (x *twitterServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *twitterServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *twitterServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *twitterServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *twitterServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *twitterServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *twitterService) BidiStream(ctx context.Context, opts ...client.CallOption) (Twitter_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Twitter.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &twitterServiceBidiStream{stream}, nil
}

type Twitter_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type twitterServiceBidiStream struct {
	stream client.Stream
}

func (x *twitterServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *twitterServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *twitterServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *twitterServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *twitterServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *twitterServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *twitterServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Twitter service

type TwitterHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Twitter_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Twitter_ServerStreamStream) error
	BidiStream(context.Context, Twitter_BidiStreamStream) error
}

func RegisterTwitterHandler(s server.Server, hdlr TwitterHandler, opts ...server.HandlerOption) error {
	type twitter interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type Twitter struct {
		twitter
	}
	h := &twitterHandler{hdlr}
	return s.Handle(s.NewHandler(&Twitter{h}, opts...))
}

type twitterHandler struct {
	TwitterHandler
}

func (h *twitterHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.TwitterHandler.Call(ctx, in, out)
}

func (h *twitterHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.TwitterHandler.ClientStream(ctx, &twitterClientStreamStream{stream})
}

type Twitter_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type twitterClientStreamStream struct {
	stream server.Stream
}

func (x *twitterClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *twitterClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *twitterClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *twitterClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *twitterClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *twitterHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TwitterHandler.ServerStream(ctx, m, &twitterServerStreamStream{stream})
}

type Twitter_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type twitterServerStreamStream struct {
	stream server.Stream
}

func (x *twitterServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *twitterServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *twitterServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *twitterServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *twitterServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *twitterHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.TwitterHandler.BidiStream(ctx, &twitterBidiStreamStream{stream})
}

type Twitter_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type twitterBidiStreamStream struct {
	stream server.Stream
}

func (x *twitterBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *twitterBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *twitterBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *twitterBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *twitterBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *twitterBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
