// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/consul.proto

package consul

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Consul service

func NewConsulEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Consul service

type ConsulService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Consul_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Consul_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Consul_BidiStreamService, error)
	RegisterServiceStream(ctx context.Context, in *RegisterServiceStreamRequest, opts ...client.CallOption) (*RegisterServiceStreamResponse, error)
	Deregister(ctx context.Context, in *DeregisterRequest, opts ...client.CallOption) (*DeregisterResponse, error)
}

type consulService struct {
	c    client.Client
	name string
}

func NewConsulService(name string, c client.Client) ConsulService {
	return &consulService{
		c:    c,
		name: name,
	}
}

func (c *consulService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Consul.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulService) ClientStream(ctx context.Context, opts ...client.CallOption) (Consul_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Consul.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &consulServiceClientStream{stream}, nil
}

type Consul_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type consulServiceClientStream struct {
	stream client.Stream
}

func (x *consulServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *consulServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *consulServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consulServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consulServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consulServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *consulService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Consul_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Consul.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &consulServiceServerStream{stream}, nil
}

type Consul_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type consulServiceServerStream struct {
	stream client.Stream
}

func (x *consulServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *consulServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *consulServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consulServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consulServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consulServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *consulService) BidiStream(ctx context.Context, opts ...client.CallOption) (Consul_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Consul.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &consulServiceBidiStream{stream}, nil
}

type Consul_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type consulServiceBidiStream struct {
	stream client.Stream
}

func (x *consulServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *consulServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *consulServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consulServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consulServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consulServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *consulServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *consulService) RegisterServiceStream(ctx context.Context, in *RegisterServiceStreamRequest, opts ...client.CallOption) (*RegisterServiceStreamResponse, error) {
	req := c.c.NewRequest(c.name, "Consul.RegisterServiceStream", in)
	out := new(RegisterServiceStreamResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulService) Deregister(ctx context.Context, in *DeregisterRequest, opts ...client.CallOption) (*DeregisterResponse, error) {
	req := c.c.NewRequest(c.name, "Consul.Deregister", in)
	out := new(DeregisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Consul service

type ConsulHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Consul_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Consul_ServerStreamStream) error
	BidiStream(context.Context, Consul_BidiStreamStream) error
	RegisterServiceStream(context.Context, *RegisterServiceStreamRequest, *RegisterServiceStreamResponse) error
	Deregister(context.Context, *DeregisterRequest, *DeregisterResponse) error
}

func RegisterConsulHandler(s server.Server, hdlr ConsulHandler, opts ...server.HandlerOption) error {
	type consul interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
		RegisterServiceStream(ctx context.Context, in *RegisterServiceStreamRequest, out *RegisterServiceStreamResponse) error
		Deregister(ctx context.Context, in *DeregisterRequest, out *DeregisterResponse) error
	}
	type Consul struct {
		consul
	}
	h := &consulHandler{hdlr}
	return s.Handle(s.NewHandler(&Consul{h}, opts...))
}

type consulHandler struct {
	ConsulHandler
}

func (h *consulHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.ConsulHandler.Call(ctx, in, out)
}

func (h *consulHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.ConsulHandler.ClientStream(ctx, &consulClientStreamStream{stream})
}

type Consul_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type consulClientStreamStream struct {
	stream server.Stream
}

func (x *consulClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *consulClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consulClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consulClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consulClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *consulHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ConsulHandler.ServerStream(ctx, m, &consulServerStreamStream{stream})
}

type Consul_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type consulServerStreamStream struct {
	stream server.Stream
}

func (x *consulServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *consulServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consulServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consulServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consulServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *consulHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.ConsulHandler.BidiStream(ctx, &consulBidiStreamStream{stream})
}

type Consul_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type consulBidiStreamStream struct {
	stream server.Stream
}

func (x *consulBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *consulBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consulBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consulBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consulBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *consulBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *consulHandler) RegisterServiceStream(ctx context.Context, in *RegisterServiceStreamRequest, out *RegisterServiceStreamResponse) error {
	return h.ConsulHandler.RegisterServiceStream(ctx, in, out)
}

func (h *consulHandler) Deregister(ctx context.Context, in *DeregisterRequest, out *DeregisterResponse) error {
	return h.ConsulHandler.Deregister(ctx, in, out)
}
