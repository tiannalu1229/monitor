// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/uni.proto

package uni

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Uni service

func NewUniEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Uni service

type UniService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Uni_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Uni_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Uni_BidiStreamService, error)
	GetFlashUser(ctx context.Context, in *GetFlashUserRequest, opts ...client.CallOption) (*GetFlashUserResponse, error)
	SaveFlashUser(ctx context.Context, in *SaveFlashUserRequest, opts ...client.CallOption) (*SaveFlashUserResponse, error)
	GetFlashSwap(ctx context.Context, in *GetFlashSwapRequest, opts ...client.CallOption) (*GetFlashSwapResponse, error)
	Sign(ctx context.Context, in *SignRequest, opts ...client.CallOption) (*SignResponse, error)
	CheckSign(ctx context.Context, in *CheckSignRequest, opts ...client.CallOption) (*CheckSignResponse, error)
	Approve(ctx context.Context, in *ApproveRequest, opts ...client.CallOption) (*ApproveResponse, error)
	Flash(ctx context.Context, in *FlashRequest, opts ...client.CallOption) (*FlashResponse, error)
	FlashBuy(ctx context.Context, in *FlashBuyRequest, opts ...client.CallOption) (*FlashBuyResponse, error)
	FlashBuyAuto(ctx context.Context, in *FlashBuyAutoRequest, opts ...client.CallOption) (*FlashBuyAutoResponse, error)
}

type uniService struct {
	c    client.Client
	name string
}

func NewUniService(name string, c client.Client) UniService {
	return &uniService{
		c:    c,
		name: name,
	}
}

func (c *uniService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Uni.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniService) ClientStream(ctx context.Context, opts ...client.CallOption) (Uni_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Uni.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &uniServiceClientStream{stream}, nil
}

type Uni_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type uniServiceClientStream struct {
	stream client.Stream
}

func (x *uniServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *uniServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *uniServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *uniServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *uniServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *uniServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *uniService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Uni_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Uni.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &uniServiceServerStream{stream}, nil
}

type Uni_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type uniServiceServerStream struct {
	stream client.Stream
}

func (x *uniServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *uniServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *uniServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *uniServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *uniServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *uniServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uniService) BidiStream(ctx context.Context, opts ...client.CallOption) (Uni_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Uni.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &uniServiceBidiStream{stream}, nil
}

type Uni_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type uniServiceBidiStream struct {
	stream client.Stream
}

func (x *uniServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *uniServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *uniServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *uniServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *uniServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *uniServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *uniServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uniService) GetFlashUser(ctx context.Context, in *GetFlashUserRequest, opts ...client.CallOption) (*GetFlashUserResponse, error) {
	req := c.c.NewRequest(c.name, "Uni.GetFlashUser", in)
	out := new(GetFlashUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniService) SaveFlashUser(ctx context.Context, in *SaveFlashUserRequest, opts ...client.CallOption) (*SaveFlashUserResponse, error) {
	req := c.c.NewRequest(c.name, "Uni.SaveFlashUser", in)
	out := new(SaveFlashUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniService) GetFlashSwap(ctx context.Context, in *GetFlashSwapRequest, opts ...client.CallOption) (*GetFlashSwapResponse, error) {
	req := c.c.NewRequest(c.name, "Uni.GetFlashSwap", in)
	out := new(GetFlashSwapResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniService) Sign(ctx context.Context, in *SignRequest, opts ...client.CallOption) (*SignResponse, error) {
	req := c.c.NewRequest(c.name, "Uni.Sign", in)
	out := new(SignResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniService) CheckSign(ctx context.Context, in *CheckSignRequest, opts ...client.CallOption) (*CheckSignResponse, error) {
	req := c.c.NewRequest(c.name, "Uni.CheckSign", in)
	out := new(CheckSignResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniService) Approve(ctx context.Context, in *ApproveRequest, opts ...client.CallOption) (*ApproveResponse, error) {
	req := c.c.NewRequest(c.name, "Uni.Approve", in)
	out := new(ApproveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniService) Flash(ctx context.Context, in *FlashRequest, opts ...client.CallOption) (*FlashResponse, error) {
	req := c.c.NewRequest(c.name, "Uni.Flash", in)
	out := new(FlashResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniService) FlashBuy(ctx context.Context, in *FlashBuyRequest, opts ...client.CallOption) (*FlashBuyResponse, error) {
	req := c.c.NewRequest(c.name, "Uni.FlashBuy", in)
	out := new(FlashBuyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniService) FlashBuyAuto(ctx context.Context, in *FlashBuyAutoRequest, opts ...client.CallOption) (*FlashBuyAutoResponse, error) {
	req := c.c.NewRequest(c.name, "Uni.FlashBuyAuto", in)
	out := new(FlashBuyAutoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Uni service

type UniHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Uni_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Uni_ServerStreamStream) error
	BidiStream(context.Context, Uni_BidiStreamStream) error
	GetFlashUser(context.Context, *GetFlashUserRequest, *GetFlashUserResponse) error
	SaveFlashUser(context.Context, *SaveFlashUserRequest, *SaveFlashUserResponse) error
	GetFlashSwap(context.Context, *GetFlashSwapRequest, *GetFlashSwapResponse) error
	Sign(context.Context, *SignRequest, *SignResponse) error
	CheckSign(context.Context, *CheckSignRequest, *CheckSignResponse) error
	Approve(context.Context, *ApproveRequest, *ApproveResponse) error
	Flash(context.Context, *FlashRequest, *FlashResponse) error
	FlashBuy(context.Context, *FlashBuyRequest, *FlashBuyResponse) error
	FlashBuyAuto(context.Context, *FlashBuyAutoRequest, *FlashBuyAutoResponse) error
}

func RegisterUniHandler(s server.Server, hdlr UniHandler, opts ...server.HandlerOption) error {
	type uni interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
		GetFlashUser(ctx context.Context, in *GetFlashUserRequest, out *GetFlashUserResponse) error
		SaveFlashUser(ctx context.Context, in *SaveFlashUserRequest, out *SaveFlashUserResponse) error
		GetFlashSwap(ctx context.Context, in *GetFlashSwapRequest, out *GetFlashSwapResponse) error
		Sign(ctx context.Context, in *SignRequest, out *SignResponse) error
		CheckSign(ctx context.Context, in *CheckSignRequest, out *CheckSignResponse) error
		Approve(ctx context.Context, in *ApproveRequest, out *ApproveResponse) error
		Flash(ctx context.Context, in *FlashRequest, out *FlashResponse) error
		FlashBuy(ctx context.Context, in *FlashBuyRequest, out *FlashBuyResponse) error
		FlashBuyAuto(ctx context.Context, in *FlashBuyAutoRequest, out *FlashBuyAutoResponse) error
	}
	type Uni struct {
		uni
	}
	h := &uniHandler{hdlr}
	return s.Handle(s.NewHandler(&Uni{h}, opts...))
}

type uniHandler struct {
	UniHandler
}

func (h *uniHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.UniHandler.Call(ctx, in, out)
}

func (h *uniHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.UniHandler.ClientStream(ctx, &uniClientStreamStream{stream})
}

type Uni_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type uniClientStreamStream struct {
	stream server.Stream
}

func (x *uniClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *uniClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *uniClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *uniClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *uniClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *uniHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UniHandler.ServerStream(ctx, m, &uniServerStreamStream{stream})
}

type Uni_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type uniServerStreamStream struct {
	stream server.Stream
}

func (x *uniServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *uniServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *uniServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *uniServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *uniServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *uniHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.UniHandler.BidiStream(ctx, &uniBidiStreamStream{stream})
}

type Uni_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type uniBidiStreamStream struct {
	stream server.Stream
}

func (x *uniBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *uniBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *uniBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *uniBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *uniBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *uniBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *uniHandler) GetFlashUser(ctx context.Context, in *GetFlashUserRequest, out *GetFlashUserResponse) error {
	return h.UniHandler.GetFlashUser(ctx, in, out)
}

func (h *uniHandler) SaveFlashUser(ctx context.Context, in *SaveFlashUserRequest, out *SaveFlashUserResponse) error {
	return h.UniHandler.SaveFlashUser(ctx, in, out)
}

func (h *uniHandler) GetFlashSwap(ctx context.Context, in *GetFlashSwapRequest, out *GetFlashSwapResponse) error {
	return h.UniHandler.GetFlashSwap(ctx, in, out)
}

func (h *uniHandler) Sign(ctx context.Context, in *SignRequest, out *SignResponse) error {
	return h.UniHandler.Sign(ctx, in, out)
}

func (h *uniHandler) CheckSign(ctx context.Context, in *CheckSignRequest, out *CheckSignResponse) error {
	return h.UniHandler.CheckSign(ctx, in, out)
}

func (h *uniHandler) Approve(ctx context.Context, in *ApproveRequest, out *ApproveResponse) error {
	return h.UniHandler.Approve(ctx, in, out)
}

func (h *uniHandler) Flash(ctx context.Context, in *FlashRequest, out *FlashResponse) error {
	return h.UniHandler.Flash(ctx, in, out)
}

func (h *uniHandler) FlashBuy(ctx context.Context, in *FlashBuyRequest, out *FlashBuyResponse) error {
	return h.UniHandler.FlashBuy(ctx, in, out)
}

func (h *uniHandler) FlashBuyAuto(ctx context.Context, in *FlashBuyAutoRequest, out *FlashBuyAutoResponse) error {
	return h.UniHandler.FlashBuyAuto(ctx, in, out)
}
